<?php

// require_once __DIR__ . "/../Core/Controller.php";
// require_once __DIR__ . "/../Models/AdminModels/DailyReportModel.php";
// require_once __DIR__ . "/../DAO/AdminDAO.php";

class Admin extends Controller
{

    // use Model;
    // use AdminDAO;


    public function index()
    {
        $this->view('Shared/sidenav/Admin');
    }

    protected function ArrangeResults($data)
    {
        $results = [];
        foreach ($data as $row) {
            // Check for each property's existence before accessing it
            $results[] = [
                'ID' => property_exists($row, 'daily_id') ? $row->daily_id : null,
                'DATE' => property_exists($row, 'date') ? $row->date : null,
                'CLOCK_IN' => property_exists($row, 'clock_in') ? $row->clock_in : null,
                'CLOCK_OUT' => property_exists($row, 'clock_out') ? $row->clock_out : null,
                'BREAK_STATUS' => property_exists($row, 'break_in') ? $row->break_status : null,
                'HRS_WORKED' => property_exists($row, 'hrs_worked') ? $row->hrs_worked : null,
                'MEETING_STATUS' => property_exists($row, 'meeting_status') ? $row->meeting_status : null,
                'EMP_ID' => property_exists($row, 'emp_id') ? $row->emp_id : null,
            ];
        }
        return $results;
    }

    public function main()
    {
        // this is the dashboard page of the admin
        try {
            // id should be replaced with id stored in a session.
            // in this way we can identify who the user was.
            $data = $this->Get(7, 'get_daily_report');
            $results = $this->ArrangeResults($data);

            $reportModels = [];
            foreach ($results as $result) {
                $reportModels[] = new DailyReportModel($result);
            }

            $this->view('Admin/Main', [
                'results' => $reportModels
            ]);
        } catch (Exception $e) {
            echo $e->getMessage();
        }
    }


    public function history()
    {
        $this->view('Admin/History');
    }

    public function management()
    {
        $this->view('Admin/Management');
    }

    public function test()
    {
        $results = $this->GetAll('DAILY_REPORT');
        $del = $this->Delete(132, 'DAILY_REPORT');

        $this->view('Test', [
            'results' => $results
        ]);
    }

    private function verifyTimeInDate($date) {
        // id number 7 is only for place holder
        $searchDate = $this->findCurrentDate(7);
        // search for the date in the database
        // if the date is found return true
        // else return false
        foreach($searchDate as $findDate) {
            if ($findDate->date == $date) {
                return true;
            }
        }
        return false;
    }

    // private function verifyTimeIn($id)
    // {
    //     $isFound = $this->checkClockIn($id);
    //     return $isFound;
    // }

    private function Action($action)
    {
        // 0 = clock in
        // 1 = clock out
        // 2 = break in
        // 3 = break out
        // This is how to get local time
        // $currentDate = date('Y-m-d');
        switch($action) {
            case 0:
                try {
                    $date = date('Y-m-d');
                    $isExist = $this->verifyTimeInDate($date);
                    if($isExist == true) {
                        // Suppose that 7 is from the session.
                        $this->adminClockOut(7);
                        return true;
                    } 
                    $this->adminClockIn(7);
                    return true;
                } catch(PDOException $e) {
                    echo 'PDO Error: ' . $e->getMessage();
                } catch(Exception $e) {
                    echo 'Error: ' . $e->getMessage();
                }
            case 1:
                
                break;
            case 2:
                
                break;
            default:
                echo 'Invalid action';
        }
    } 

    // http endpoint
    public function Status()
    {
        if ($_SERVER["REQUEST_METHOD"] !== "POST") {
            header("Content-Type: application/json");
            echo json_encode([
                'status' => false,
                'message' => 'Invalid request method'
            ]);
        }

        // Get raw data from request body
        $rawData = file_get_contents('php://input');

        // Decode JSON data into PHP object
        $data = json_decode($rawData);

        $getStatus = isset($data->status) ? $data->status : null;
        $getOperation = isset($data->action) ? $data->action : null;

        // This method decides which action to take
        // based on the operations performed in the client side.
        $this->Action($getOperation);

        // Prepare data to send back
        $responseData = [
            'status' => $getStatus,
            'operation' => $getOperation,
        ];

        // Set header to application/json
        header('Content-Type: application/json');

        // Send data back to frontend
        echo json_encode($responseData);

    }

    private function inputValidation($array)
    {
        foreach ($array as $key => $value) {
            if (empty($value)) {
                return false;
            }
        }
        return true;
    }

    public function AddEmployee()
    {
        if ($_SERVER["REQUEST_METHOD"] !== "POST") {
            header("Content-Type: application/json");
            echo json_encode([
                'status' => false,
                'message' => 'Invalid request method'
            ]);
        }

        $rawData = file_get_contents('php://input');
        $data = json_decode($rawData);



        header("Content-Type: application/json");
        $serverResponse = [
            'status' => true,
            'message' => 'Employee added successfully'
        ];

        echo json_encode($serverResponse);
    }
}